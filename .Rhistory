burnin=1000,
bbetween=NULL,
methodvar=NULL
)
asthma$treat[1:200]<-3 # creates a 3rd arm
asthma$base2 <- asthma$base^2 # creates a 2nd covariate
asthma$fev<-asthma$fev*1000
head(asthma)
# explore data (using skills learned from Michelle)
asthma %>% count(treat)
asthma %>% filter(!is.na(fev)) %>%
group_by(treat, time) %>%
summarise(n=n(), fevmean=mean(fev), fevsd=sd(fev))
# J2R
impJ2R1 <- mimix(data="asthma",
covar=c("base","base2"),
depvar="fev",
treatvar="treat",
idvar="id",
timevar="time",
M=100,
reference=1,
method="J2R",
seed=101,
prior="jeffreys",
burnin=1000,
bbetween=NULL,
methodvar=NULL
)
asthmaJ2R <- mimix(data=asthma, covar=c("base"), depvar=fev, treatvar=treat, idvar=id, timevar=time,
method="J2R", reference=1, M=5, seed=101, prior=ridge, burnin=1000)
asthmaJ2R <- mimix(data="asthma", covar=c("base"), depvar=fev, treatvar=treat, idvar=id, timevar=time,
method="J2R", reference=1, M=5, seed=101, prior=ridge, burnin=1000)
asthmaJ2R <- mimix(data="asthma", covar="base", depvar=fev, treatvar=treat, idvar=id, timevar=time,
method="J2R", reference=1, M=5, seed=101, prior=ridge, burnin=1000)
asthmaJ2R <- mimix(data="asthma", covar="base", depvar=fev, treatvar=treat, idvar=id, timevar=time, method="J2R", reference=1, M=5, seed=101, prior=ridge, burnin=1000)
asthmaJ2R <- mimix(data='asthma', covar="base", depvar=fev, treatvar=treat, idvar=id, timevar=time, method="J2R", reference=1, M=5, seed=101, prior=ridge, burnin=1000)
asthmaJ2R <- mimix(data="asthma", covar=base, depvar=fev, treatvar=treat, idvar=id, timevar=time, method="J2R", reference=1, M=5, seed=101, prior=ridge, burnin=1000)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(metaRmat)
library(metafor)
library(corpcor)
library(Matrix)
library(matrixcalc)
becker09 <- read.csv(paste0(system.file('raw_data', package = 'metaRmat'), '/Becker09.csv'))
becker09 <- na.omit(becker09) # ommiting studies with NA
becker09
becker09_list <- df_to_corr(becker09,
variables = c('Cognitive_Performance',
'Somatic_Performance',
'Selfconfidence_Performance',
'Somatic_Cognitive',
'Selfconfidence_Cognitive',
'Selfconfidence_Somatic'),
ID = 'ID')
# vectorize the correlation matrix
sm2vec(becker09_list$`3`)
# Computations needed to obtain the weighted average by n
Rw1 <- lapply(becker09_list, sm2vec)  # vectorize
Rw2 <- mapply("*",Rw1, becker09$N, SIMPLIFY = FALSE)  # multiply by n
Rw3 <- Reduce("+", Rw2)
nS <- Reduce('+', becker09$N)   # sum all n
Rw4 <- Rw3/nS
# results on the chapter
round(Rw4, 3)
# Compuations needed to obtain the weighted average by n
round(olkin_siotani(becker09_list, becker09$N, type = "weighted")[[2]], 3)
# compute var-cov for each study
VC_s <- olkin_siotani(becker09_list, becker09$N, type = 'simple')
# extract the diagonal (variance) from each
V_s <- lapply(VC_s, diag)
# vectorize corr matrices
rr <- lapply(becker09_list,  sm2vec)  # vectorize
# select proper elements of each list
fun_list <- function(lst, n){
sapply(lst, `[`, n)
}
# now six separated univariate metas under common-effects
a <- 1:length(rr[[1]])
res <- numeric(length = length(a))
for (i in seq_along(a)) {
res[i] <-  metafor::rma(yi = fun_list(rr, i), vi = fun_list(V_s, i), method = "FE")$b
}
# common-effects results
round(res, 3)
res2 <- numeric(length = length(a))
for (i in seq_along(a)) {
res2[i] <-  metafor::rma(yi = fun_list(rr, i), vi = fun_list(V_s, i))$b
}
# randon-effects results
round(res2, 3)
input_metafor <- prep_data(becker09, becker09$N, type = 'weighted', missing = FALSE,
variable_names = c('Cognitive_Performance', 'Somatic_Performance',
'Selfconfidence_Performance',
'Somatic_Cognitive',
'Selfconfidence_Cognitive',
'Selfconfidence_Somatic'),
ID = 'ID')
# Fitting the model
random_model <- fit_model(data = input_metafor, effect_size = 'yi',
var_cor = 'V', moderators = ~ -1 + factor(outcome),
random_params = ~ factor(outcome) | factor(study))
# result
round(vec2sm(random_model$b, diag = FALSE), 3) # random effect estimate
# Fist we fit the model
common_model <- fit_model(data = input_metafor, effect_size = 'yi',
var_cor = 'V', moderators = ~ -1 + factor(outcome),
random_params = NULL)
# result
round(vec2sm(common_model$b, diag = FALSE), 3) # common effect estimate
# covariance of random-effects means
round(random_model$vb, 4) # random effect Cov
round(common_model$vb, 4) # fixed effect COV
# I2
res3 <- numeric(length = length(a))
for (i in seq_along(a)) {
res3[i] <- 100 * (vcov(random_model)[i,i] - vcov(common_model)[i,i]) / vcov(random_model)[i,i]
}
round(res3)
# Q
common_model$QE
# df
common_model$df
#------------------
# tau matrix
#------------------
mdiag <-1
rho <-  vec2sm(random_model$rho, diag = FALSE)
diag(rho) <- mdiag
tdiag <- diag(sqrt(random_model$tau2))
taumat <- tdiag %*% rho %*% tdiag
round(taumat, 3)
round(cov2cor(taumat),3)
# T matrix
round(cov2cor(taumat),3)
# Qb
round(random_model$QM, 2)
# T matrix
round(random_model$zval[1], 2) # z value
round(random_model$pval[1], 2) # p value
model_out_random <- extract_model(random_model,
variable_names = c('Cognitive_Performance',
'Somatic_Performance',
'Selfconfidence_Performance',
'Somatic_Cognitive',
'Selfconfidence_Cognitive',
'Selfconfidence_Somatic'))
model <- "## Regression paths
Performance ~ Cognitive + Somatic + Selfconfidence
Selfconfidence ~ Cognitive + Somatic
## Fix the variances of Cog and SO at 1
Cognitive ~~ 1*Cognitive
Somatic ~~ 1*Somatic
Cognitive ~~ Somatic"
output1 <- path_model(data = model_out_random, model = model, num_obs = sum(becker09$N))
model_out_random <- extract_model(random_model,
variable_names = c('Cognitive_Performance',
'Somatic_Performance',
'Selfconfidence_Performance',
'Somatic_Cognitive',
'Selfconfidence_Cognitive',
'Selfconfidence_Somatic'))
model <- "## Regression paths
Performance ~ Cognitive + Somatic + Selfconfidence
Selfconfidence ~ Cognitive + Somatic"
output1 <- path_model(data = model_out_random, model = model, num_obs = sum(becker09$N))
summary(output1)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(metaRmat)
library(metafor)
library(corpcor)
library(Matrix)
library(matrixcalc)
becker09 <- read.csv(paste0(system.file('raw_data', package = 'metaRmat'), '/Becker09.csv'))
becker09 <- na.omit(becker09) # ommiting studies with NA
becker09
becker09_list <- df_to_corr(becker09,
variables = c('Cognitive_Performance',
'Somatic_Performance',
'Selfconfidence_Performance',
'Somatic_Cognitive',
'Selfconfidence_Cognitive',
'Selfconfidence_Somatic'),
ID = 'ID')
# vectorize the correlation matrix
sm2vec(becker09_list$`3`)
# Computations needed to obtain the weighted average by n
Rw1 <- lapply(becker09_list, sm2vec)  # vectorize
Rw2 <- mapply("*",Rw1, becker09$N, SIMPLIFY = FALSE)  # multiply by n
Rw3 <- Reduce("+", Rw2)
nS <- Reduce('+', becker09$N)   # sum all n
Rw4 <- Rw3/nS
# results on the chapter
round(Rw4, 3)
# Compuations needed to obtain the weighted average by n
round(olkin_siotani(becker09_list, becker09$N, type = "weighted")[[2]], 3)
# compute var-cov for each study
VC_s <- olkin_siotani(becker09_list, becker09$N, type = 'simple')
# extract the diagonal (variance) from each
V_s <- lapply(VC_s, diag)
# vectorize corr matrices
rr <- lapply(becker09_list,  sm2vec)  # vectorize
# select proper elements of each list
fun_list <- function(lst, n){
sapply(lst, `[`, n)
}
# now six separated univariate metas under common-effects
a <- 1:length(rr[[1]])
res <- numeric(length = length(a))
for (i in seq_along(a)) {
res[i] <-  metafor::rma(yi = fun_list(rr, i), vi = fun_list(V_s, i), method = "FE")$b
}
# common-effects results
round(res, 3)
res2 <- numeric(length = length(a))
for (i in seq_along(a)) {
res2[i] <-  metafor::rma(yi = fun_list(rr, i), vi = fun_list(V_s, i))$b
}
# randon-effects results
round(res2, 3)
input_metafor <- prep_data(becker09, becker09$N, type = 'weighted', missing = FALSE,
variable_names = c('Cognitive_Performance', 'Somatic_Performance',
'Selfconfidence_Performance',
'Somatic_Cognitive',
'Selfconfidence_Cognitive',
'Selfconfidence_Somatic'),
ID = 'ID')
# Fitting the model
random_model <- fit_model(data = input_metafor, effect_size = 'yi',
var_cor = 'V', moderators = ~ -1 + factor(outcome),
random_params = ~ factor(outcome) | factor(study))
# result
round(vec2sm(random_model$b, diag = FALSE), 3) # random effect estimate
# Fist we fit the model
common_model <- fit_model(data = input_metafor, effect_size = 'yi',
var_cor = 'V', moderators = ~ -1 + factor(outcome),
random_params = NULL)
# result
round(vec2sm(common_model$b, diag = FALSE), 3) # common effect estimate
# covariance of random-effects means
round(random_model$vb, 4) # random effect Cov
round(common_model$vb, 4) # fixed effect COV
# I2
res3 <- numeric(length = length(a))
for (i in seq_along(a)) {
res3[i] <- 100 * (vcov(random_model)[i,i] - vcov(common_model)[i,i]) / vcov(random_model)[i,i]
}
round(res3)
# Q
common_model$QE
# df
common_model$df
#------------------
# tau matrix
#------------------
mdiag <-1
rho <-  vec2sm(random_model$rho, diag = FALSE)
diag(rho) <- mdiag
tdiag <- diag(sqrt(random_model$tau2))
taumat <- tdiag %*% rho %*% tdiag
round(taumat, 3)
round(cov2cor(taumat),3)
# T matrix
round(cov2cor(taumat),3)
# Qb
round(random_model$QM, 2)
# T matrix
round(random_model$zval[1], 2) # z value
round(random_model$pval[1], 2) # p value
model_out_random <- extract_model(random_model,
variable_names = c('Cognitive_Performance',
'Somatic_Performance',
'Selfconfidence_Performance',
'Somatic_Cognitive',
'Selfconfidence_Cognitive',
'Selfconfidence_Somatic'))
model <- "## Regression paths
Performance ~ Cognitive + Somatic + Selfconfidence
Selfconfidence ~ Cognitive + Somatic"
output1 <- path_model(data = model_out_random, model = model, num_obs = sum(becker09$N))
summary(output1)
Br <- model_out_random$beta_matrix
Br_2 <- Br[-1, -1]
Rxx_2 <- Br_2[-3, -3]
Rxy_2 <- Br_2[3, 1:2]
B_2 <- solve(Rxx_2) %*% Rxy_2
# variance explained for self-confidence
R_2 <- t(B_2) %*% Rxy_2
round(100*R_2)
Br <- vec2sm(random_model$b, diag = FALSE)
diag(Br) <- 1
Rxx <- Br[-1, -1]
Rxy <- Br[1, 2:4]
B <- solve(Rxx) %*% Rxy
# variance explained for sport performance
R2 <- t(B) %*% Rxy
round(100*R2)
# partial corr matrix
round(cor2pcor(model_out_random$beta_matrix),3)[4,1]
# var-cov matrix of partials
Psy <- random_model$vb
var_p <- var_path(model_out_random$beta_matrix, Psy, type = 'pcor')
round(sqrt(diag(var_p)),3)
#---------------------------------------------------------------------
# Create a data set with 8 complete studies
#---------------------------------------------------------------------
R <-  becker09_list
n <- becker09$N
#------------------------------------------------------------------
# first replace NA by zeros
RR <- R                           # redifine list
PR <- lapply(RR, cor2pcor)
pr <- unlist(lapply(PR, '[[', 4))
var_pr <- (1-pr^2)^2 / (n - 3 -1)
round(rma.uni(pr, var_pr)$b, 3)
round(rma.uni(pr, var_pr)$se, 4)
library(devtools)
install_github("UCL/mimix")
install_github("UCL/mimix")
install_github("UCL/mimix")
install_github("UCL/mimix")
install_github("UCL/RefBasedMI")
install_github("UCL/RefBasedMI")
remove.packages(fansi)
library(devtools)
if(!require(devtools)) install.packages('devtools')
library(devtools)
install_github("UCL/RefBasedMI")
source('C:/ado/ian/myRmimix/test/Ian installation.R', echo=TRUE)
install_github("UCL/RefBasedMI")
install_github("UCL/RefBasedMI")
install_github("UCL/RefBasedMI")
library(norm2)
library(mimix)
library(mice)
asthmaJ2R <- mimix(data = asthma, covar = 'base', depvar = fev, treatvar = treat,
idvar = id, timevar = time, method = 'J2R', reference = 2, M = 5, seed = 101,
prior = ridge, burnin = 1000)
help(mimix)
mimix()
Rmimix()
RefBasedMI()
asthma
asthmaJ2R <- mimix(data = asthma, covar = 'base', depvar = fev, treatvar = treat,
idvar = id, timevar = time, method = 'J2R', reference = 2, M = 5, seed = 101,
prior = ridge, burnin = 1000)
impJ2Rridge <- mimix(data = asthma, covar = c(base), depvar = fev, treatvar = treat,
idvar = id, timevar = time, method = "J2R", reference = 2,
delta = c(-1, 0, 0, 0), M = 5, seed = 101, prior = "ridge")
antidepIndiv <- mimix(data = antidepressant, covar = c(basval, PATIENT.SEX),
depvar = HAMD17.TOTAL, treatvar = TREATMENT.NAME, idvar = PATIENT.NUMBER,
timevar = VISIT.NUMBER, methodvar = methodcol, referencevar = referencecol,
M = 5, seed = 54321)
acuCausal <- mimix(data = acupuncture, covar = c(head_base), depvar = head,
treatvar = treat, idvar = id, timevar = time, method = "Causal",
reference = 1, K0 = 1, K1 = 0.5, M = 5, seed = 54321)
acufit <- with(as.mids(subset(impCausalref, time == 12)),
lm(head ~ treat + head_base + sex))
summary(pool(acufit))
acufit <- with(as.mids(subset(acuCausal, time == 12)),
lm(head ~ treat + head_base + sex))
summary(pool(acufit))
asthmaJ2R <- mimix(data = asthma, covar = 'base', depvar = fev, treatvar = treat,
idvar = id, timevar = time, method = 'J2R', reference = 2, M = 5, seed = 101,
prior = ridge, burnin = 1000)
# J2R analysis with control as reference
asthmaJ2R <- mimix(data = asthma, covar = base, depvar = fev, treatvar = treat,
idvar = id, timevar = time, method = 'J2R', reference = 2, M = 5, seed = 101,
prior = ridge, burnin = 1000)
asthmaJ2R <- mimix(data = asthma, covar = base, depvar = fev, treatvar = treat,
idvar = id, timevar = time, method = 'J2R', reference = 2, M = 5, seed = 101,
prior = 'ridge', burnin = 1000)
asthmaJ2R <- mimix(data = asthma, covar = 'base', depvar = fev, treatvar = treat,
idvar = id, timevar = time, method = 'J2R', reference = 2, M = 5, seed = 101,
prior = 'ridge', burnin = 1000)
# J2R analysis with control as reference
asthmaJ2R <- mimix(data = asthma, covar = 'base', depvar = fev, treatvar = treat,
idvar = id, timevar = time, method = 'J2R', reference = 2, M = 5, seed = 101,
prior = ridge, burnin = 1000)
impJ2Rridge <- mimix(data = asthma, covar = c(base), depvar = fev, treatvar = treat,
idvar = id, timevar = time, method = "J2R", reference = 2,
delta = c(-1, 0, 0, 0), M = 5, seed = 101, prior = "ridge")
antidepIndiv <- mimix(data = antidepressant, covar = c(basval, PATIENT.SEX),
depvar = HAMD17.TOTAL, treatvar = TREATMENT.NAME, idvar = PATIENT.NUMBER,
timevar = VISIT.NUMBER, methodvar = methodcol, referencevar = referencecol,
M = 5, seed = 54321)
antidepressant
head(antidepressant)
antidepressant=antidepressant
View(antidepressant)
head(antidepressant)
antidepIndiv <- mimix(data = antidepressant, covar = c(basval, PATIENT.SEX),
depvar = HAMD17.TOTAL, treatvar = TREATMENT.NAME, idvar = PATIENT.NUMBER,
timevar = VISIT.NUMBER, methodvar = methodcol, referencevar = referencecol,
M = 5, seed = 54321)
which(mimix)
version(mimix)
library(RefBasedMI)
asthmaJ2R <- mimix(data = asthma, covar = 'base', depvar = fev, treatvar = treat,
idvar = id, timevar = time, method = 'J2R', reference = 2, M = 5, seed = 101,
prior = 'ridge', burnin = 1000)
asthmafit <- with(data = as.mids(asthmaJ2R), lm(fev.12 ~ treat + base))
summary(pool(asthmafit))
View(asthmaJ2R)
View(asthmaJ2R)
asthmafit <- with(data = as.mids(subset(asthmaJ2R, time==12), lm(fev.12 ~ treat + base))
)
asthmafit <- with(data = as.mids(subset(asthmaJ2R, time==12)), lm(fev.12 ~ treat + base))
asthmafit <- with(data = as.mids(subset(asthmaJ2R, time==12)), lm(fev ~ treat + base))
summary(pool(asthmafit))
impJ2Rridge <- mimix(data = asthma, covar = c(base), depvar = fev, treatvar = treat,
idvar = id, timevar = time, method = "J2R", reference = 2,
delta = c(-1, 0, 0, 0), M = 5, seed = 101, prior = "ridge")
asthmaJ2R <- mimix(data = asthma, covar = base, depvar = fev, treatvar = treat,
idvar = id, timevar = time, method = 'J2R', reference = 2, M = 5, seed = 101,
prior = 'ridge', burnin = 1000)
asthmadelta <- mimix(data = asthma, covar = base, depvar = fev, treatvar = treat,
idvar = id, timevar = time, method = "J2R", reference = 2,
delta = c(-1, 0, 0, 0), M = 5, seed = 101, prior = "ridge")
acuCausal <- mimix(data = acupuncture, covar = head_base, depvar = head,
treatvar = treat, idvar = id, timevar = time, method = "Causal",
reference = 1, K0 = 1, K1 = 0.5, M = 5, seed = 54321)
source('C:/ado/ian/myRmimix/paper/examples.R', echo=TRUE)
antidepIndiv <- mimix(data = antidepressant, covar = c(basval, PATIENT.SEX),
depvar = HAMD17.TOTAL, treatvar = TREATMENT.NAME, idvar = PATIENT.NUMBER,
timevar = VISIT.NUMBER, methodvar = methodcol, referencevar = referencecol,
M = 5, seed = 54321)
help(mimix)
antidepIndiv <- mimix(data = antidepressant, covar = c(basval, PATIENT.SEX),
depvar = HAMD17.TOTAL, treatvar = TREATMENT.NAME, idvar = PATIENT.NUMBER,
timevar = VISIT.NUMBER, method = "CIR", reference = 2,
M = 5, seed = 54321)
antidepIndiv <- mimix(data = antidepressant, covar = c(basval),
depvar = HAMD17.TOTAL, treatvar = TREATMENT.NAME, idvar = PATIENT.NUMBER,
timevar = VISIT.NUMBER, methodvar = methodcol, referencevar = referencecol,
M = 5, seed = 54321)
antidepIndiv <- mimix(data = antidepressant, covar = basval,
depvar = HAMD17.TOTAL, treatvar = TREATMENT.NAME, idvar = PATIENT.NUMBER,
timevar = VISIT.NUMBER, methodvar = methodcol, referencevar = referencecol,
M = 5, seed = 54321)
### Sample data: acupuncture trial
# Causal model: treatment effect halves every 1 time unit
# after treatment discontinuation
acuCausal <- mimix(data = acupuncture, covar = head_base, depvar = head,
treatvar = treat, idvar = id, timevar = time, method = "Causal",
reference = 1, K0 = 1, K1 = 0.5, M = 5, seed = 54321)
# Analysis
acufit <- with(as.mids(subset(acuCausal, time == 12)),
lm(head ~ treat + head_base + sex))
summary(pool(acufit))
View(acufit)
install_github("UCL/RefBasedMI")
install_github("UCL/mimix")
install_github("UCL/Rmimix")
help("RefBasedMI")
help(RefBasedMI)
help("mimix")
source("C:\\ado\\ian\\Rmimix\\R\\Runmimix.R")
source("C:\\ado\\ian\\Rmimix\\R\\proprocess.R")
source("C:\\ado\\ian\\Rmimix\\R\\utilities.R")
help("mimix")
help("mimix")
cat("C:\\ado\\ian\\Rmimix\\R\\Runmimix.R")
cat(C:\\ado\\ian\\Rmimix\\R\\Runmimix.R)
install_github("UCL/RefBasedMI")
help("mimix")
install_github("UCL/RefBasedMI")
install_github("UCL/RefBasedMI")
help("mimix")
help("RefBasedMI")
help("RefBasedMI::mimix")
library(RefBasedMI)
help("RefBasedMI::mimix")
help("RefBasedMI")
help("mimix")
help("RefBasedMI")
help("RefBasedMI::mimix")
help(RefBasedMI::mimix)
source('C:/ado/ian/myRmimix/paper/examples.R', echo=TRUE)
antidepIndiv <- mimix(data = antidepressant, covar = c(basval, PATIENT.SEX),
depvar = HAMD17.TOTAL, treatvar = TREATMENT.NAME, idvar = PATIENT.NUMBER,
timevar = VISIT.NUMBER, method = "CIR", reference = 2,
M = 5, seed = 54321)
source('~//Home/Design/PRaCTical/simpaper/Kim/test script for smallest effect function.R', echo=TRUE)
source('~//Home/Design/PRaCTical/simpaper/Kim/test script for smallest effect function.R', echo=TRUE)
source('~//Home/Design/PRaCTical/simpaper/Kim/test script for smallest effect function.R', echo=TRUE)
source('~//Home/Design/PRaCTical/simpaper/Kim/test script for smallest effect function.R', echo=TRUE)
source('~//Home/Design/PRaCTical/simpaper/Kim/test script for smallest effect function.R', echo=TRUE)
ind_effect
source('~//Home/Design/PRaCTical/simpaper/Kim/test script for smallest effect function.R', echo=TRUE)
source('~//Home/Design/PRaCTical/simpaper/Kim/test script for smallest effect function.R', echo=TRUE)
source('~//Home/Design/PRaCTical/simpaper/Kim/test script for smallest effect function.R', echo=TRUE)
source('~//Home/Design/PRaCTical/simpaper/Kim/test script for smallest effect function.R', echo=TRUE)
source('~//Home/Design/PRaCTical/simpaper/Kim/test script for smallest effect function.R', echo=TRUE)
source('~//Home/Design/PRaCTical/simpaper/Kim/test script for smallest effect function.R', echo=TRUE)
source('~//Home/Design/PRaCTical/simpaper/Kim/test script for smallest effect function.R', echo=TRUE)
source('~//Home/Design/PRaCTical/simpaper/Kim/test script for smallest effect function.R', echo=TRUE)
source('~//Home/Design/PRaCTical/simpaper/Kim/test script for smallest effect function.R', echo=TRUE)
source('~//Home/Design/PRaCTical/simpaper/Kim/test script for smallest effect function.R', echo=TRUE)
setwd("C:/ado/ian/PRACTical")
source('C:/ado/ian/PRACTical/PRACTical_one data replication_ian.R', echo=TRUE)
source('C:/ado/ian/PRACTical/s1_2i.R', echo=TRUE)
source('C:/ado/ian/PRACTical/s1_2i.R', echo=TRUE)
scenario_out
scenario_out$ex_performance_out
source('C:/ado/ian/PRACTical/s1_2i.R', echo=TRUE)
